Statements
- Whitespace does not matter, but follow best practices for readability
- Console.readline();
    - Reads in input 
-Console.WriteLine();
    - Reads out a statement or text 

Comments
- // starts a comment for a single line 
- /* Starts a multi line comment 
        Comments go here 
        then here 
- */ Ends multi line comment 
- Highlight multiple lines and comment out with CTRL + K + C
- Uncomment with CTRL + K + U

Key Words 
- int, ref, in, return, class, while, string, etc 

Variables 
- Hold values 
- string x = "Hi" 
- Types
    - Int, string, date, etc 

Declaration statements 
- int age; 
    - integer variable age; 
    - age = 22 
    - Case matters 

Data Types
- Strongly typed language
- Predefined Types 
    - Built in and used out of the box like INT 
-Built In 
    - Bool
    - Int 
    - float 
    -double 
    - decimal has highest precision
    - char - single characters 
    - byte 8 bit integers 
        - 0 to 255 
    - short 
    - object 
    - string 

Operators
- =, +, >
- Follow order of Operations
- Can use variable with operator 
- if month < 1, do something 
- use + for string concat 
- Compound operators month += 1
- VariableName-- 
    - Decreases by 1
    - or ++ increases by 1

Members
- Min / Max value
- int age = int.MaxValue or int.MinValue
- char type members 
    - char myChar = 'a'
    - bool isWhiteSpace = char.isWhiteSpace(myChar);
        - Returns true if myChar is whitespace 
    - bool isDigit = char.isDigit(myChar);
        - Returns true if its a digit 
    - bool is Punct = char.IsPunctuation(myChar);

DateTime Types 
- DateTime 
- TimeSpan 
- DateTime startDate = new DateTime(2025, 03, 28)
    - new initializes date
- DateTime today = DateTime.Today 
    - retruns current date 
- DateTime twoDaysLater = someDateTime.AddDays(2)
- DayOfWeek day = someDateTime.DayOfWeek;
- bool isDST = someDateTime.IsDaylightSavingTime();

Converting Data Types 
- Implicit 
    - int a = 123456789; 
    - long l = a;
    - converts integer to long integer 
- Explicit 
    - double d = 1234567.54
    - int a = (int) d; // convert to integer 

Implicit Typing 
- int a = 123; same as var a = 123; //will be an integer 
- C # implies / figures out the data type based on value 
- Data type decided at compile time 

Constants
- Const keyword
- Value cannot ever be changed within applicaiton
- Const int intRate = 0.07
    - intRate always stays 0.07

Integer parsing from input
- int.parse(Console.Readline());

Switch Statements
- Good for many conditions to check
- lots of if, else if, etc.
- switch(expression)
   {
   case constant expression 1:
    statements
    break;}
- break indicates where it should run til
-if no match found, use default value
    - case < 18
    - case > 65
    - case 45
    - default: 
    - see program.cs under 05 > start
- doesnt work for float or doubles
- case labels use a pattern like relational or constant
- First match is executed
- each case is unique
- Default is evaluated last

String formatting
- string.format("{0} {1}", first, last )
    - Works like string concatenation
    - 0 / 1 replaces with next values
- string.join
    - joins strings with a separator
    - var numbers = new int[3] {1, 2, 3};
    - string list = string.Join(",", numbers);
    - "1, 2, 3" is new string
- strings are immutable
- string verbatim
    - use @ sign at beginning of string to ignore escape characters
        - dont have to use escape characters

Enums
- use where you have a number of related constants
- created sort of like a class
    
    public enum ShipMethod
    {
        Regular = 1,
        RegisteredAir = 2,
        Express = 3
    }
    - then you can call it

    var method = ShipMethod.Express;
- Arrays
    - Arrays are reference types, so anything applied will effect references
    - Ex:
        
        var array1 = new int[3] {1, 2, 3}
        var array2 = array 1
        array2[0] = 5
        Consol.WriteLine(array1[0]) = 5 because array2 references array1
            - Does not create a new array
- integers are value types, so it does create a new variable
    var num1 = 1
    var num2 = num1
    num2++;
    Console.WriteLine(num1) still equals 1